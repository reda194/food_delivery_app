// Mocks generated by Mockito 5.4.4 from annotations
// in food_delivery_app/test/core/services/authentication_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:food_delivery_app/core/services/database_service.dart' as _i6;
import 'package:food_delivery_app/core/services/supabase_service.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;
import 'package:supabase_flutter/supabase_flutter.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSupabaseClient_0 extends _i1.SmartFake
    implements _i2.SupabaseClient {
  _FakeSupabaseClient_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAuthResponse_1 extends _i1.SmartFake implements _i2.AuthResponse {
  _FakeAuthResponse_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRealtimeChannel_2 extends _i1.SmartFake
    implements _i2.RealtimeChannel {
  _FakeRealtimeChannel_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFuture_3<T1> extends _i1.SmartFake implements _i3.Future<T1> {
  _FakeFuture_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFunctionsClient_4 extends _i1.SmartFake
    implements _i2.FunctionsClient {
  _FakeFunctionsClient_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSupabaseStorageClient_5 extends _i1.SmartFake
    implements _i2.SupabaseStorageClient {
  _FakeSupabaseStorageClient_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRealtimeClient_6 extends _i1.SmartFake
    implements _i2.RealtimeClient {
  _FakeRealtimeClient_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePostgrestClient_7 extends _i1.SmartFake
    implements _i2.PostgrestClient {
  _FakePostgrestClient_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGoTrueClient_8 extends _i1.SmartFake implements _i2.GoTrueClient {
  _FakeGoTrueClient_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSupabaseQueryBuilder_9 extends _i1.SmartFake
    implements _i2.SupabaseQueryBuilder {
  _FakeSupabaseQueryBuilder_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSupabaseQuerySchema_10 extends _i1.SmartFake
    implements _i2.SupabaseQuerySchema {
  _FakeSupabaseQuerySchema_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePostgrestFilterBuilder_11<T1> extends _i1.SmartFake
    implements _i2.PostgrestFilterBuilder<T1> {
  _FakePostgrestFilterBuilder_11(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUser_12 extends _i1.SmartFake implements _i2.User {
  _FakeUser_12(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSession_13 extends _i1.SmartFake implements _i2.Session {
  _FakeSession_13(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [SupabaseService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSupabaseService extends _i1.Mock implements _i4.SupabaseService {
  MockSupabaseService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.SupabaseClient get client => (super.noSuchMethod(
        Invocation.getter(#client),
        returnValue: _FakeSupabaseClient_0(
          this,
          Invocation.getter(#client),
        ),
      ) as _i2.SupabaseClient);

  @override
  bool get isAuthenticated => (super.noSuchMethod(
        Invocation.getter(#isAuthenticated),
        returnValue: false,
      ) as bool);

  @override
  _i3.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<_i2.AuthResponse> signUpWithEmail({
    required String? email,
    required String? password,
    String? displayName,
    Map<String, dynamic>? metadata,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #signUpWithEmail,
          [],
          {
            #email: email,
            #password: password,
            #displayName: displayName,
            #metadata: metadata,
          },
        ),
        returnValue: _i3.Future<_i2.AuthResponse>.value(_FakeAuthResponse_1(
          this,
          Invocation.method(
            #signUpWithEmail,
            [],
            {
              #email: email,
              #password: password,
              #displayName: displayName,
              #metadata: metadata,
            },
          ),
        )),
      ) as _i3.Future<_i2.AuthResponse>);

  @override
  _i3.Future<_i2.AuthResponse> signInWithEmail({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #signInWithEmail,
          [],
          {
            #email: email,
            #password: password,
          },
        ),
        returnValue: _i3.Future<_i2.AuthResponse>.value(_FakeAuthResponse_1(
          this,
          Invocation.method(
            #signInWithEmail,
            [],
            {
              #email: email,
              #password: password,
            },
          ),
        )),
      ) as _i3.Future<_i2.AuthResponse>);

  @override
  _i3.Future<_i2.AuthResponse> signInWithGoogle() => (super.noSuchMethod(
        Invocation.method(
          #signInWithGoogle,
          [],
        ),
        returnValue: _i3.Future<_i2.AuthResponse>.value(_FakeAuthResponse_1(
          this,
          Invocation.method(
            #signInWithGoogle,
            [],
          ),
        )),
      ) as _i3.Future<_i2.AuthResponse>);

  @override
  _i3.Future<void> signOut() => (super.noSuchMethod(
        Invocation.method(
          #signOut,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> resetPassword(String? email) => (super.noSuchMethod(
        Invocation.method(
          #resetPassword,
          [email],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> updatePassword(String? newPassword) => (super.noSuchMethod(
        Invocation.method(
          #updatePassword,
          [newPassword],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> refreshSession() => (super.noSuchMethod(
        Invocation.method(
          #refreshSession,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i2.RealtimeChannel subscribeToTable({
    required String? table,
    required String? channelId,
    required dynamic Function(Map<String, dynamic>)? onInsert,
    required dynamic Function(Map<String, dynamic>)? onUpdate,
    required dynamic Function(Map<String, dynamic>)? onDelete,
    String? filter,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #subscribeToTable,
          [],
          {
            #table: table,
            #channelId: channelId,
            #onInsert: onInsert,
            #onUpdate: onUpdate,
            #onDelete: onDelete,
            #filter: filter,
          },
        ),
        returnValue: _FakeRealtimeChannel_2(
          this,
          Invocation.method(
            #subscribeToTable,
            [],
            {
              #table: table,
              #channelId: channelId,
              #onInsert: onInsert,
              #onUpdate: onUpdate,
              #onDelete: onDelete,
              #filter: filter,
            },
          ),
        ),
      ) as _i2.RealtimeChannel);

  @override
  void unsubscribeFromChannel(_i2.RealtimeChannel? channel) =>
      super.noSuchMethod(
        Invocation.method(
          #unsubscribeFromChannel,
          [channel],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Future<String> uploadFile({
    required String? bucket,
    required String? path,
    required dynamic file,
    _i2.FileOptions? fileOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #uploadFile,
          [],
          {
            #bucket: bucket,
            #path: path,
            #file: file,
            #fileOptions: fileOptions,
          },
        ),
        returnValue: _i3.Future<String>.value(_i5.dummyValue<String>(
          this,
          Invocation.method(
            #uploadFile,
            [],
            {
              #bucket: bucket,
              #path: path,
              #file: file,
              #fileOptions: fileOptions,
            },
          ),
        )),
      ) as _i3.Future<String>);

  @override
  String getPublicUrl(
    String? bucket,
    String? path,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPublicUrl,
          [
            bucket,
            path,
          ],
        ),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.method(
            #getPublicUrl,
            [
              bucket,
              path,
            ],
          ),
        ),
      ) as String);

  @override
  _i3.Future<void> deleteFile({
    required String? bucket,
    required String? path,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteFile,
          [],
          {
            #bucket: bucket,
            #path: path,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<T> performOperation<T>({
    required _i3.Future<T> Function(_i2.SupabaseClient)? operation,
    int? maxRetries = 3,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #performOperation,
          [],
          {
            #operation: operation,
            #maxRetries: maxRetries,
          },
        ),
        returnValue: _i5.ifNotNull(
              _i5.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #performOperation,
                  [],
                  {
                    #operation: operation,
                    #maxRetries: maxRetries,
                  },
                ),
              ),
              (T v) => _i3.Future<T>.value(v),
            ) ??
            _FakeFuture_3<T>(
              this,
              Invocation.method(
                #performOperation,
                [],
                {
                  #operation: operation,
                  #maxRetries: maxRetries,
                },
              ),
            ),
      ) as _i3.Future<T>);

  @override
  String hashString(String? input) => (super.noSuchMethod(
        Invocation.method(
          #hashString,
          [input],
        ),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.method(
            #hashString,
            [input],
          ),
        ),
      ) as String);

  @override
  bool isValidEmail(String? email) => (super.noSuchMethod(
        Invocation.method(
          #isValidEmail,
          [email],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i3.Future<void> dispose() => (super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}

/// A class which mocks [DatabaseService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseService extends _i1.Mock implements _i6.DatabaseService {
  MockDatabaseService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<Map<String, dynamic>>> select(
    String? table, {
    List<String>? columns = const [r'*'],
    String? where,
    String? orderBy,
    int? limit,
    int? offset,
    bool? single = false,
    Map<String, dynamic>? searchTerms,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #select,
          [table],
          {
            #columns: columns,
            #where: where,
            #orderBy: orderBy,
            #limit: limit,
            #offset: offset,
            #single: single,
            #searchTerms: searchTerms,
          },
        ),
        returnValue: _i3.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
      ) as _i3.Future<List<Map<String, dynamic>>>);

  @override
  _i3.Future<Map<String, dynamic>> insert(
    String? table,
    Map<String, dynamic>? data, {
    bool? returnData = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #insert,
          [
            table,
            data,
          ],
          {#returnData: returnData},
        ),
        returnValue:
            _i3.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i3.Future<Map<String, dynamic>>);

  @override
  _i3.Future<Map<String, dynamic>> update(
    String? table,
    Map<String, dynamic>? data,
    String? idColumn,
    dynamic id, {
    bool? returnData = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [
            table,
            data,
            idColumn,
            id,
          ],
          {#returnData: returnData},
        ),
        returnValue:
            _i3.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i3.Future<Map<String, dynamic>>);

  @override
  _i3.Future<void> delete(
    String? table,
    String? idColumn,
    dynamic id,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [
            table,
            idColumn,
            id,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<List<Map<String, dynamic>>> queryWithRelations(
    String? table, {
    List<String>? relations = const [],
    List<String>? columns = const [r'*'],
    String? where,
    String? orderBy,
    int? limit,
    int? offset,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #queryWithRelations,
          [table],
          {
            #relations: relations,
            #columns: columns,
            #where: where,
            #orderBy: orderBy,
            #limit: limit,
            #offset: offset,
          },
        ),
        returnValue: _i3.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
      ) as _i3.Future<List<Map<String, dynamic>>>);

  @override
  _i3.Future<int> count(
    String? table, {
    String? where,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #count,
          [table],
          {#where: where},
        ),
        returnValue: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);

  @override
  _i3.Future<List<dynamic>> distinct(
    String? table,
    String? column,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #distinct,
          [
            table,
            column,
          ],
        ),
        returnValue: _i3.Future<List<dynamic>>.value(<dynamic>[]),
      ) as _i3.Future<List<dynamic>>);

  @override
  _i3.Future<List<Map<String, dynamic>>> batchInsert(
    String? table,
    List<Map<String, dynamic>>? records, {
    bool? returnData = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #batchInsert,
          [
            table,
            records,
          ],
          {#returnData: returnData},
        ),
        returnValue: _i3.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
      ) as _i3.Future<List<Map<String, dynamic>>>);

  @override
  _i3.Future<void> batchUpdate(
    String? table,
    List<Map<String, dynamic>>? updates,
    String? idColumn,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #batchUpdate,
          [
            table,
            updates,
            idColumn,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<List<Map<String, dynamic>>> fullTextSearch(
    String? table,
    String? column,
    String? query, {
    List<String>? searchColumns = const [],
    int? limit,
    int? offset,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #fullTextSearch,
          [
            table,
            column,
            query,
          ],
          {
            #searchColumns: searchColumns,
            #limit: limit,
            #offset: offset,
          },
        ),
        returnValue: _i3.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
      ) as _i3.Future<List<Map<String, dynamic>>>);

  @override
  _i3.Future<List<Map<String, dynamic>>> proximitySearch(
    String? table,
    double? latitude,
    double? longitude, {
    double? radius = 10.0,
    String? latitudeColumn = r'latitude',
    String? longitudeColumn = r'longitude',
    int? limit,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #proximitySearch,
          [
            table,
            latitude,
            longitude,
          ],
          {
            #radius: radius,
            #latitudeColumn: latitudeColumn,
            #longitudeColumn: longitudeColumn,
            #limit: limit,
          },
        ),
        returnValue: _i3.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
      ) as _i3.Future<List<Map<String, dynamic>>>);

  @override
  _i3.Future<List<dynamic>> transaction(
          List<_i3.Future<dynamic> Function(_i2.SupabaseClient)>? operations) =>
      (super.noSuchMethod(
        Invocation.method(
          #transaction,
          [operations],
        ),
        returnValue: _i3.Future<List<dynamic>>.value(<dynamic>[]),
      ) as _i3.Future<List<dynamic>>);

  @override
  _i3.Future<bool> exists(
    String? table,
    String? idColumn,
    dynamic id,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #exists,
          [
            table,
            idColumn,
            id,
          ],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<int> getMaxId(
    String? table,
    String? idColumn,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMaxId,
          [
            table,
            idColumn,
          ],
        ),
        returnValue: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);

  @override
  _i3.Future<int> getNextId(
    String? table,
    String? idColumn,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getNextId,
          [
            table,
            idColumn,
          ],
        ),
        returnValue: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);

  @override
  _i3.Future<Map<String, List<Map<String, dynamic>>>> backupTables(
          List<String>? tables) =>
      (super.noSuchMethod(
        Invocation.method(
          #backupTables,
          [tables],
        ),
        returnValue: _i3.Future<Map<String, List<Map<String, dynamic>>>>.value(
            <String, List<Map<String, dynamic>>>{}),
      ) as _i3.Future<Map<String, List<Map<String, dynamic>>>>);

  @override
  void clearCache() => super.noSuchMethod(
        Invocation.method(
          #clearCache,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Future<Map<String, dynamic>> getDatabaseStats() => (super.noSuchMethod(
        Invocation.method(
          #getDatabaseStats,
          [],
        ),
        returnValue:
            _i3.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i3.Future<Map<String, dynamic>>);
}

/// A class which mocks [SupabaseClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockSupabaseClient extends _i1.Mock implements _i2.SupabaseClient {
  MockSupabaseClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FunctionsClient get functions => (super.noSuchMethod(
        Invocation.getter(#functions),
        returnValue: _FakeFunctionsClient_4(
          this,
          Invocation.getter(#functions),
        ),
      ) as _i2.FunctionsClient);

  @override
  set functions(_i2.FunctionsClient? _functions) => super.noSuchMethod(
        Invocation.setter(
          #functions,
          _functions,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.SupabaseStorageClient get storage => (super.noSuchMethod(
        Invocation.getter(#storage),
        returnValue: _FakeSupabaseStorageClient_5(
          this,
          Invocation.getter(#storage),
        ),
      ) as _i2.SupabaseStorageClient);

  @override
  set storage(_i2.SupabaseStorageClient? _storage) => super.noSuchMethod(
        Invocation.setter(
          #storage,
          _storage,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.RealtimeClient get realtime => (super.noSuchMethod(
        Invocation.getter(#realtime),
        returnValue: _FakeRealtimeClient_6(
          this,
          Invocation.getter(#realtime),
        ),
      ) as _i2.RealtimeClient);

  @override
  set realtime(_i2.RealtimeClient? _realtime) => super.noSuchMethod(
        Invocation.setter(
          #realtime,
          _realtime,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.PostgrestClient get rest => (super.noSuchMethod(
        Invocation.getter(#rest),
        returnValue: _FakePostgrestClient_7(
          this,
          Invocation.getter(#rest),
        ),
      ) as _i2.PostgrestClient);

  @override
  set rest(_i2.PostgrestClient? _rest) => super.noSuchMethod(
        Invocation.setter(
          #rest,
          _rest,
        ),
        returnValueForMissingStub: null,
      );

  @override
  Map<String, String> get headers => (super.noSuchMethod(
        Invocation.getter(#headers),
        returnValue: <String, String>{},
      ) as Map<String, String>);

  @override
  set headers(Map<String, String>? headers) => super.noSuchMethod(
        Invocation.setter(
          #headers,
          headers,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.GoTrueClient get auth => (super.noSuchMethod(
        Invocation.getter(#auth),
        returnValue: _FakeGoTrueClient_8(
          this,
          Invocation.getter(#auth),
        ),
      ) as _i2.GoTrueClient);

  @override
  _i2.SupabaseQueryBuilder from(String? table) => (super.noSuchMethod(
        Invocation.method(
          #from,
          [table],
        ),
        returnValue: _FakeSupabaseQueryBuilder_9(
          this,
          Invocation.method(
            #from,
            [table],
          ),
        ),
      ) as _i2.SupabaseQueryBuilder);

  @override
  _i2.SupabaseQuerySchema schema(String? schema) => (super.noSuchMethod(
        Invocation.method(
          #schema,
          [schema],
        ),
        returnValue: _FakeSupabaseQuerySchema_10(
          this,
          Invocation.method(
            #schema,
            [schema],
          ),
        ),
      ) as _i2.SupabaseQuerySchema);

  @override
  _i2.PostgrestFilterBuilder<T> rpc<T>(
    String? fn, {
    Map<String, dynamic>? params,
    dynamic get = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #rpc,
          [fn],
          {
            #params: params,
            #get: get,
          },
        ),
        returnValue: _FakePostgrestFilterBuilder_11<T>(
          this,
          Invocation.method(
            #rpc,
            [fn],
            {
              #params: params,
              #get: get,
            },
          ),
        ),
      ) as _i2.PostgrestFilterBuilder<T>);

  @override
  _i2.RealtimeChannel channel(
    String? name, {
    _i2.RealtimeChannelConfig? opts = const _i2.RealtimeChannelConfig(),
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #channel,
          [name],
          {#opts: opts},
        ),
        returnValue: _FakeRealtimeChannel_2(
          this,
          Invocation.method(
            #channel,
            [name],
            {#opts: opts},
          ),
        ),
      ) as _i2.RealtimeChannel);

  @override
  List<_i2.RealtimeChannel> getChannels() => (super.noSuchMethod(
        Invocation.method(
          #getChannels,
          [],
        ),
        returnValue: <_i2.RealtimeChannel>[],
      ) as List<_i2.RealtimeChannel>);

  @override
  _i3.Future<String> removeChannel(_i2.RealtimeChannel? channel) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeChannel,
          [channel],
        ),
        returnValue: _i3.Future<String>.value(_i5.dummyValue<String>(
          this,
          Invocation.method(
            #removeChannel,
            [channel],
          ),
        )),
      ) as _i3.Future<String>);

  @override
  _i3.Future<List<String>> removeAllChannels() => (super.noSuchMethod(
        Invocation.method(
          #removeAllChannels,
          [],
        ),
        returnValue: _i3.Future<List<String>>.value(<String>[]),
      ) as _i3.Future<List<String>>);

  @override
  _i3.Future<void> dispose() => (super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}

/// A class which mocks [User].
///
/// See the documentation for Mockito's code generation for more information.
class MockUser extends _i1.Mock implements _i2.User {
  MockUser() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.getter(#id),
        ),
      ) as String);

  @override
  Map<String, dynamic> get appMetadata => (super.noSuchMethod(
        Invocation.getter(#appMetadata),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  String get aud => (super.noSuchMethod(
        Invocation.getter(#aud),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.getter(#aud),
        ),
      ) as String);

  @override
  String get createdAt => (super.noSuchMethod(
        Invocation.getter(#createdAt),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.getter(#createdAt),
        ),
      ) as String);

  @override
  bool get isAnonymous => (super.noSuchMethod(
        Invocation.getter(#isAnonymous),
        returnValue: false,
      ) as bool);

  @override
  Map<String, dynamic> toJson() => (super.noSuchMethod(
        Invocation.method(
          #toJson,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);
}

/// A class which mocks [Session].
///
/// See the documentation for Mockito's code generation for more information.
class MockSession extends _i1.Mock implements _i2.Session {
  MockSession() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get accessToken => (super.noSuchMethod(
        Invocation.getter(#accessToken),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.getter(#accessToken),
        ),
      ) as String);

  @override
  String get tokenType => (super.noSuchMethod(
        Invocation.getter(#tokenType),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.getter(#tokenType),
        ),
      ) as String);

  @override
  _i2.User get user => (super.noSuchMethod(
        Invocation.getter(#user),
        returnValue: _FakeUser_12(
          this,
          Invocation.getter(#user),
        ),
      ) as _i2.User);

  @override
  set expiresAt(int? _expiresAt) => super.noSuchMethod(
        Invocation.setter(
          #expiresAt,
          _expiresAt,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get isExpired => (super.noSuchMethod(
        Invocation.getter(#isExpired),
        returnValue: false,
      ) as bool);

  @override
  Map<String, dynamic> toJson() => (super.noSuchMethod(
        Invocation.method(
          #toJson,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  _i2.Session copyWith({
    String? accessToken,
    int? expiresIn,
    String? refreshToken,
    String? tokenType,
    String? providerToken,
    String? providerRefreshToken,
    _i2.User? user,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #copyWith,
          [],
          {
            #accessToken: accessToken,
            #expiresIn: expiresIn,
            #refreshToken: refreshToken,
            #tokenType: tokenType,
            #providerToken: providerToken,
            #providerRefreshToken: providerRefreshToken,
            #user: user,
          },
        ),
        returnValue: _FakeSession_13(
          this,
          Invocation.method(
            #copyWith,
            [],
            {
              #accessToken: accessToken,
              #expiresIn: expiresIn,
              #refreshToken: refreshToken,
              #tokenType: tokenType,
              #providerToken: providerToken,
              #providerRefreshToken: providerRefreshToken,
              #user: user,
            },
          ),
        ),
      ) as _i2.Session);
}
